#!/usr/bin/env node

/**
 * Script de migration pour ajouter le champ isAudioOnly aux MediaAssets existants
 * Ce script d√©tecte automatiquement les fichiers audio en se basant sur le mimeType
 */

import { connectDB } from '../src/lib/mongodb.js';
import { MediaAsset } from '../src/models/MediaAsset.js';

async function migrateAudioDetection() {
    try {
        console.log('üîß Connexion √† la base de donn√©es...');
        await connectDB();

        console.log('üîç Recherche des assets vid√©o sans le champ isAudioOnly...');

        // Trouver tous les assets qui n'ont pas le champ isAudioOnly
        const assetsToUpdate = await MediaAsset.find({
            isAudioOnly: { $exists: false }
        });

        console.log(`üìä Trouv√© ${assetsToUpdate.length} assets √† migrer`);

        if (assetsToUpdate.length === 0) {
            console.log('‚úÖ Aucune migration n√©cessaire');
            process.exit(0);
        }

        let audioCount = 0;
        let videoCount = 0;

        // Mettre √† jour chaque asset
        for (const asset of assetsToUpdate) {
            const isAudio = asset.mimeType.startsWith('audio/');

            await MediaAsset.findByIdAndUpdate(asset._id, {
                isAudioOnly: isAudio,
                hasAudio: isAudio || asset.hasAudio // Si c'est audio seulement, alors hasAudio = true
            });

            if (isAudio) {
                audioCount++;
                console.log(`üéµ Asset audio d√©tect√©: ${asset.originalName} (${asset.mimeType})`);
            } else {
                videoCount++;
                console.log(`üé¨ Asset vid√©o: ${asset.originalName} (${asset.mimeType})`);
            }
        }

        console.log('üìà R√©sultats de la migration:');
        console.log(`   - Assets audio: ${audioCount}`);
        console.log(`   - Assets vid√©o: ${videoCount}`);
        console.log(`   - Total trait√©: ${assetsToUpdate.length}`);
        console.log('‚úÖ Migration termin√©e avec succ√®s!');

    } catch (error) {
        console.error('‚ùå Erreur lors de la migration:', error);
        process.exit(1);
    }
}

// Ex√©cuter la migration si ce script est appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
    migrateAudioDetection();
}

export { migrateAudioDetection };
